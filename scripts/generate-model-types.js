/* eslint-disable n/no-unpublished-import */
/* eslint-disable no-console */
import fs from 'fs'
import path, { dirname } from 'path'
import { fileURLToPath } from 'url'
import { transpileFile } from 'ts-to-jsdoc'
import { ZodToTypescript } from '@duplojs/zod-to-typescript'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const modulePath = '../src/api/common/models'

const upperCaseFirst = (str) => str.charAt(0).toUpperCase() + str.slice(1)

fs.readdirSync(path.resolve(__dirname, modulePath)).forEach((file) => {
  if (file.endsWith('.js')) {
    const filePath = path.join(modulePath, file)
    import(filePath)
      .then((model) => {
        if (model.zodSchema) {
          const modelName = model.zodSchema.collection.replace(/s$/, '')
          const ztt = new ZodToTypescript()

          model.zodSchema.append &&
            Object.keys(model.zodSchema.append).forEach((schema) => {
              const name = schema.replace(/Schema$/, '')
              ztt.append(model.zodSchema.append[schema], upperCaseFirst(name))
            })

          ztt.append(model.zodSchema.schema, upperCaseFirst(modelName))

          const transpiledCode = transpileFile({ code: ztt.toString() })

          const relativePath = filePath.replace('../', '')
          fs.writeFileSync(
            path.join(__dirname, modulePath, '../types', `${modelName}.d.js`),
            `// This file is auto-generated from: ${relativePath}
// Do not edit this file directly! Use: npm run generate:model-types

${transpiledCode.replaceAll('{Object}', '{object}')}`
          )
          console.info(`JSDocs generated for: ${relativePath}`)
        }
        return null
      })
      .catch((error) => {
        console.error(`Error processing file ${filePath}:`, error)
      })
  }
})
